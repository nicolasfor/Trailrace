package com.cam.trailrace.navegacion;

import android.Manifest;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationManager;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.content.ContextCompat;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.cam.trailrace.actividades.NavigationMainActivity;
import com.cam.trailrace.modelo.Pista;
import com.cam.trailrace.modelo.Punto;
import com.cam.trailrace.modelo.PuntoReferencia;
import com.firebase.client.Firebase;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.Polyline;
import com.google.android.gms.maps.model.PolylineOptions;
import com.cam.trailrace.R;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.location.LocationListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by NicolasForero on 12/09/16.
 */
public class TrackFragment extends Fragment implements OnMapReadyCallback,
        GoogleApiClient.ConnectionCallbacks,
        GoogleApiClient.OnConnectionFailedListener,
        LocationListener {

    private GoogleMap mMap;
    ArrayList<LatLng> MarkerPoints;
    GoogleApiClient mGoogleApiClient;
    LocationRequest mLocationRequest;
    private ArrayList<LatLng> points;
    private  ArrayList<Pista> pistas;
    private DataCommunication mCallback;
    private String nombrePista;
    Polyline line;
    private LatLng puntoActual;
    private LatLng puntoMarca;
    private TextView empezar;
    private TextView marcar;
    private TextView crearNombrePista;
    private TextView terminar;
    private FragmentActivity fa;
    View rootView;


    public TrackFragment() {

    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

    }

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);

        try {
            mCallback = (DataCommunication) getActivity();
        } catch (Exception e) {

            e.printStackTrace();
        }
    }

    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {

        fa = super.getActivity();

        rootView = inflater.inflate(R.layout.fragment_track, container, false);
        points = new ArrayList<LatLng>();
        pistas= new ArrayList<Pista>();
        empezar = (TextView) rootView.findViewById(R.id.buttonRunMaps);
        marcar = (TextView) rootView.findViewById(R.id.buttonMarca);
        terminar = (TextView) rootView.findViewById(R.id.buttonTerminar);
        crearNombrePista = (TextView) rootView.findViewById(R.id.crear_nombre_pista);
        empezar.setVisibility(rootView.GONE);
        marcar.setVisibility(rootView.GONE);
        terminar.setVisibility(rootView.GONE);
        Intent intent = fa.getIntent();
        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            checkLocationPermission();
        }

        // Initializing
        MarkerPoints = new ArrayList<>();

        // Obtain the SupportMapFragment and get notified when the map is ready to be used.
        SupportMapFragment mapFragment = ((SupportMapFragment) this.getChildFragmentManager().findFragmentById(R.id.map));
        mapFragment.getMapAsync(this);

        getActivity().getWindow().setSoftInputMode(
                WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);

        crearNombrePista.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showPopUpCreateName();
            }
        });
        empezar.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                onResumen();
            }
        });
        marcar.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                marcarPunto();
                // terminar();
            }
        });
        terminar.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                cargarPista();
            }
        });
        return rootView;
    }

    /**
     * Manipulates the map once available.
     * This callback is triggered when the map is ready to be used.
     * This is where we can add markers or lines, add listeners or move the camera. In this case,
     * we just add a marker near Sydney, Australia.
     * If Google Play services is not installed on the device, the user will be prompted to install
     * it inside the SupportMapFragment. This method will only be triggered once the user has
     * installed Google Play services and returned to the app.
     */
    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;

        //Initialize Google Play Services
        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (ContextCompat.checkSelfPermission(super.getContext(),
                    Manifest.permission.ACCESS_FINE_LOCATION)
                    == PackageManager.PERMISSION_GRANTED) {
                buildGoogleApiClient();
                mMap.setMyLocationEnabled(true);
            }
        } else {
            buildGoogleApiClient();
            mMap.setMyLocationEnabled(true);
        }
        LocationManager locationManager = (LocationManager) super.getActivity().getSystemService(super.getContext().LOCATION_SERVICE);
        Criteria criteria = new Criteria();

        Location location = locationManager.getLastKnownLocation(locationManager.getBestProvider(criteria, false));
        if (location != null) {

            mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(location.getLatitude(), location.getLongitude()), 13));
            CameraPosition cameraPosition = new CameraPosition.Builder().target(new LatLng(location.getLatitude(), location.getLongitude()))
                    .zoom(17)
                    .bearing(90)
                    .tilt(40)
                    .build();
            googleMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));

            mLocationRequest = new LocationRequest();
            mLocationRequest.setInterval(500);
            mLocationRequest.setSmallestDisplacement(0.25F);
            mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        }


    }

    public void showPopUpCreateName(){

        AlertDialog.Builder alertDialog = new AlertDialog.Builder(getActivity());
        alertDialog.setTitle("Track name");
        alertDialog.setMessage("Enter a name for the track");

        final EditText input = new EditText(rootView.getContext());
        LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.MATCH_PARENT);
        input.setLayoutParams(lp);
        alertDialog.setView(input);

        alertDialog.setPositiveButton("Agregar",
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        nombrePista=input.getText().toString();
                        empezar.setVisibility(rootView.VISIBLE);
                        crearNombrePista.setVisibility(rootView.GONE);
                    }
                });

        alertDialog.show();




    }
    protected void stopLocationUpdates() {
        LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
    }

    protected void onResumen() {
        if (mGoogleApiClient.isConnected() && ContextCompat.checkSelfPermission(super.getContext(),
                Manifest.permission.ACCESS_FINE_LOCATION)
                == PackageManager.PERMISSION_GRANTED) {
            LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        }
        marcar.setVisibility(rootView.VISIBLE);
        empezar.setVisibility(rootView.GONE);
        terminar.setVisibility(rootView.VISIBLE);
    }

    protected synchronized void buildGoogleApiClient() {
        mGoogleApiClient = new GoogleApiClient.Builder(super.getContext())
                .addConnectionCallbacks(this)
                .addOnConnectionFailedListener(this)
                .addApi(LocationServices.API)
                .build();
        mGoogleApiClient.connect();
    }

    @Override
    public void onConnected(Bundle bundle) {

        mLocationRequest = new LocationRequest();
        mLocationRequest.setInterval(1000);
        mLocationRequest.setFastestInterval(1000);
        mLocationRequest.setPriority(LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY);
        if (ContextCompat.checkSelfPermission(super.getContext(),
                Manifest.permission.ACCESS_FINE_LOCATION)
                == PackageManager.PERMISSION_GRANTED) {
            LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        }

        stopLocationUpdates();

    }

    @Override
    public void onConnectionSuspended(int i) {

    }

    @Override
    public void onLocationChanged(Location location) {
        CameraPosition cameraPosition= new CameraPosition.Builder().target(new LatLng(location.getLatitude(),location.getLongitude()))
                .zoom(17)
                .bearing(90)
                .tilt(40)
                .build();
        mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));
        LatLng latLng = new LatLng(location.getLatitude(), location.getLongitude());
        points.add(latLng);
        puntoActual = latLng;
        redDrawLine();

        if (puntoMarca != null) {
            MarkerOptions options = new MarkerOptions();
            options.position(puntoMarca);
            options.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN));
            mMap.addMarker(options);
        }


    }

    public void redDrawLine() {
        mMap.clear();
        PolylineOptions options = new PolylineOptions().width(5).color(Color.BLUE).geodesic(true);
        for (int i = 0; i < points.size(); i++) {
            LatLng point = points.get(i);
            options.add(point);
        }
        line = mMap.addPolyline(options);

    }

    public void cargarPista() {

        if(puntoMarca!=null) {
            FragmentManager fm = getFragmentManager();

            ArrayList<Punto>lineaPuntos = new ArrayList<>();
            List<LatLng> puntos=line.getPoints();
            for (int i = 0; i < puntos.size(); i++) {
                Punto pun=new Punto(puntos.get(i).latitude+"",puntos.get(i).longitude+"");
                lineaPuntos.add(pun);
            }

            PuntoReferencia puntoRed= new PuntoReferencia(puntoMarca.latitude+"",puntoMarca.longitude+"","0");
            List<PuntoReferencia> puntosDeReferencia= new ArrayList<>();
            puntosDeReferencia.add(puntoRed);
            Pista p= new Pista(nombrePista,puntosDeReferencia,lineaPuntos);
            Log.e("SON ESTOS:",lineaPuntos.get(0).getLatitud());
            pistas.add(p);
            agregarPistaFire(p);
            mCallback.agregarPista(pistas);
            fm.beginTransaction().replace(R.id.container_body, new TrackListFragment()).commit();
            ((NavigationMainActivity) super.getActivity()).getSupportActionBar().setTitle("Track");


        }

        else {
            Toast.makeText(super.getContext(), "Debe ubicar una marca de inicio", Toast.LENGTH_LONG).show();

        }
    }

    public void agregarPistaFire(Pista pista){
        Firebase nueva=mCallback.darFire().child("pistas").push();
        nueva.setValue(pista);
    }
    public void marcarPunto() {

        if(puntoActual!=null) {
            puntoMarca = puntoActual;
        }
        else{
            LocationManager locationManager = (LocationManager) super.getActivity().getSystemService(super.getContext().LOCATION_SERVICE);
            Criteria criteria = new Criteria();
            checkLocationPermission();
            Location location = locationManager.getLastKnownLocation(locationManager.getBestProvider(criteria, false));
            LatLng p= new LatLng(location.getLatitude(),location.getLongitude());
            puntoMarca=p;
        }
        MarkerOptions options = new MarkerOptions();
        options.position(puntoMarca);
        options.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN));
        mMap.addMarker(options);
    }

    @Override
    public void onConnectionFailed(ConnectionResult connectionResult) {

    }

    public static final int MY_PERMISSIONS_REQUEST_LOCATION = 99;

    public boolean checkLocationPermission() {
        if (ContextCompat.checkSelfPermission(super.getContext(),
                Manifest.permission.ACCESS_FINE_LOCATION)
                != PackageManager.PERMISSION_GRANTED) {

            // Asking user if explanation is needed
            if (ActivityCompat.shouldShowRequestPermissionRationale(super.getActivity(),
                    Manifest.permission.ACCESS_FINE_LOCATION)) {

                // Show an explanation to the user *asynchronously* -- don't block
                // this thread waiting for the user's response! After the user
                // sees the explanation, try again to request the permission.

                //Prompt the user once explanation has been shown
                ActivityCompat.requestPermissions(super.getActivity(),
                        new String[]{Manifest.permission.ACCESS_FINE_LOCATION},
                        MY_PERMISSIONS_REQUEST_LOCATION);


            } else {
                // No explanation needed, we can request the permission.
                ActivityCompat.requestPermissions(super.getActivity(),
                        new String[]{Manifest.permission.ACCESS_FINE_LOCATION},
                        MY_PERMISSIONS_REQUEST_LOCATION);
            }
            return false;
        } else {
            return true;
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           String permissions[], int[] grantResults) {
        switch (requestCode) {
            case MY_PERMISSIONS_REQUEST_LOCATION: {
                // If request is cancelled, the result arrays are empty.
                if (grantResults.length > 0
                        && grantResults[0] == PackageManager.PERMISSION_GRANTED) {

                    // permission was granted. Do the
                    // contacts-related task you need to do.
                    if (ContextCompat.checkSelfPermission(super.getContext(),
                            Manifest.permission.ACCESS_FINE_LOCATION)
                            == PackageManager.PERMISSION_GRANTED) {

                        if (mGoogleApiClient == null) {
                            buildGoogleApiClient();
                        }
                        mMap.setMyLocationEnabled(true);
                    }

                } else {

                    // Permission denied, Disable the functionality that depends on this permission.
                    Toast.makeText(super.getContext(), "permission denied", Toast.LENGTH_LONG).show();
                }
                return;
            }

            // other 'case' lines to check for other permissions this app might request.
            // You can add here other case statements according to your requirement.
        }
    }

}
