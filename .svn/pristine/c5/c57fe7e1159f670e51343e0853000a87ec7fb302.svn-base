package com.cam.trailrace.actividades;

import android.app.AlertDialog;
import android.content.ActivityNotFoundException;
import android.content.ComponentName;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.ResolveInfo;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.cam.trailrace.R;
import com.cam.trailrace.lib.FireBaseHelper;
import com.cam.trailrace.modelo.Equipo;
import com.cam.trailrace.modelo.Piloto;
import com.cam.trailrace.modelo.PilotoItem;
import com.cam.trailrace.modelo.Pista;
import com.cam.trailrace.modelo.PistaItem;
import com.cam.trailrace.navegacion.CropOption;
import com.cam.trailrace.navegacion.CropOptionAdapter;
import com.cam.trailrace.navegacion.DataCommunication;
import com.cam.trailrace.navegacion.FragmentDrawer;
import com.cam.trailrace.navegacion.PilotListFragment;
import com.cam.trailrace.navegacion.TeamFragment;
import com.cam.trailrace.navegacion.TrackListFragment;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class NavigationMainActivity extends AppCompatActivity implements DataCommunication,FragmentDrawer.FragmentDrawerListener{


    private Uri mImageCaptureUri;
    private int posicion;
    private ArrayList<Pista> pistas;
    private ArrayList<PistaItem> pistasItem;
    private ArrayList<Piloto> pilotos;
    private PilotoItem pilotoAEditar;
    private ArrayList<PilotoItem> pilotosItem;
    private FireBaseHelper helper;
    private String currentID;
    ImageView banar1;

    TextView showname;
    private static final int PICK_FROM_CAMERA = 1;
    private static final int CROP_FROM_CAMERA = 2;
    private static final int PICK_FROM_FILE = 3;

    private static String TAG = MainActivity.class.getSimpleName();

    private Toolbar mToolbar;
    private FragmentDrawer drawerFragment;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_navigation_main);

        Log.e("ENTRAAAAA","AAA-------------------");
        showname= (TextView)findViewById(R.id.showName);
        showname.setText(getIntent().getExtras().getString("name"));
        helper = FireBaseHelper.getInstance();
        String[] web = NavigationMainActivity.this.getResources().getStringArray(R.array.nav_drawer_labels);
        currentID=getIntent().getExtras().getString("ID");
        //myFireBase=new Firebase("https://trailrace.firebaseio.com/");;
        final String [] items			= new String [] {"Take from camera", "Select from gallery"};
        ArrayAdapter<String> adapter	= new ArrayAdapter<String> (this, android.R.layout.select_dialog_item,items);
        AlertDialog.Builder builder		= new AlertDialog.Builder(this);

        builder.setTitle("Select Image");
        builder.setAdapter( adapter, new DialogInterface.OnClickListener() {
            public void onClick( DialogInterface dialog, int item ) { //pick from camera
                if (item == 0) {
                    Intent intent 	 = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);

                    mImageCaptureUri = Uri.fromFile(new File(Environment.getExternalStorageDirectory(),
                            "tmp_avatar_" + String.valueOf(System.currentTimeMillis()) + ".jpg"));

                    intent.putExtra(MediaStore.EXTRA_OUTPUT, mImageCaptureUri);

                    try {
                        intent.putExtra("return-data", true);

                        startActivityForResult(intent, PICK_FROM_CAMERA);
                    } catch (ActivityNotFoundException e) {
                        e.printStackTrace();
                    }
                } else { //pick from file
                    Intent intent = new Intent();

                    intent.setType("image/*");
                    intent.setAction(Intent.ACTION_GET_CONTENT);

                    startActivityForResult(Intent.createChooser(intent, "Complete action using"), PICK_FROM_FILE);
                }
            }
        } );

        final AlertDialog dialog = builder.create();
        banar1=(ImageView)findViewById(R.id.banar1);
        banar1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {


                dialog.show();

            }
        });



        mToolbar = (Toolbar) findViewById(R.id.toolbar);

        setSupportActionBar(mToolbar);
        getSupportActionBar().setDisplayShowHomeEnabled(true);

        drawerFragment = (FragmentDrawer)
                getSupportFragmentManager().findFragmentById(R.id.fragment_navigation_drawer);
        drawerFragment.setUp(R.id.fragment_navigation_drawer, (DrawerLayout) findViewById(R.id.drawer_layout), mToolbar);
        drawerFragment.setDrawerListener(this);

        displayView(0);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (resultCode != RESULT_OK) return;

        switch (requestCode) {
            case PICK_FROM_CAMERA:
                doCrop();

                break;

            case PICK_FROM_FILE:
                mImageCaptureUri = data.getData();

                doCrop();

                break;

            case CROP_FROM_CAMERA:
                Bundle extras = data.getExtras();

                if (extras != null) {
                    Bitmap photo = extras.getParcelable("data");

                    banar1.setImageBitmap(photo);
                }

                File f = new File(mImageCaptureUri.getPath());

                if (f.exists()) f.delete();

                break;

        }
    }

    private void doCrop() {
        final ArrayList<CropOption> cropOptions = new ArrayList<CropOption>();

        Intent intent = new Intent("com.android.camera.action.CROP");
        intent.setType("image/*");

        List<ResolveInfo> list = getPackageManager().queryIntentActivities( intent, 0 );

        int size = list.size();

        if (size == 0) {
            Toast.makeText(this, "Can not find image crop app", Toast.LENGTH_SHORT).show();

            return;
        } else {
            intent.setData(mImageCaptureUri);

            intent.putExtra("outputX", 200);
            intent.putExtra("outputY", 200);
            intent.putExtra("aspectX", 1);
            intent.putExtra("aspectY", 1);
            intent.putExtra("scale", true);
            intent.putExtra("return-data", true);

            if (size == 1) {
                Intent i 		= new Intent(intent);
                ResolveInfo res	= list.get(0);

                i.setComponent( new ComponentName(res.activityInfo.packageName, res.activityInfo.name));

                startActivityForResult(i, CROP_FROM_CAMERA);
            } else {
                for (ResolveInfo res : list) {
                    final CropOption co = new CropOption();

                    co.title 	= getPackageManager().getApplicationLabel(res.activityInfo.applicationInfo);
                    co.icon		= getPackageManager().getApplicationIcon(res.activityInfo.applicationInfo);
                    co.appIntent= new Intent(intent);

                    co.appIntent.setComponent( new ComponentName(res.activityInfo.packageName, res.activityInfo.name));

                    cropOptions.add(co);
                }

                CropOptionAdapter adapter = new CropOptionAdapter(getApplicationContext(), cropOptions);

                AlertDialog.Builder builder = new AlertDialog.Builder(this);
                builder.setTitle("Choose Crop App");
                builder.setAdapter( adapter, new DialogInterface.OnClickListener() {
                    public void onClick( DialogInterface dialog, int item ) {
                        startActivityForResult( cropOptions.get(item).appIntent, CROP_FROM_CAMERA);
                    }
                });

                builder.setOnCancelListener( new DialogInterface.OnCancelListener() {
                    @Override
                    public void onCancel( DialogInterface dialog ) {

                        if (mImageCaptureUri != null ) {
                            getContentResolver().delete(mImageCaptureUri, null, null );
                            mImageCaptureUri = null;
                        }
                    }
                } );

                AlertDialog alert = builder.create();

                alert.show();
            }
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        if(id == R.id.action_search){
            Toast.makeText(getApplicationContext(), "Search action is selected!", Toast.LENGTH_SHORT).show();
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    @Override
    public void onDrawerItemSelected(View view, int position) {
        displayView(position);
    }

    private void displayView(int position) {
        Fragment fragment = null;
        String title = getString(R.string.app_name);
        switch (position) {
            case 0:
                fragment = new PilotListFragment();
                title = getString(R.string.title_pilots);
                break;
            case 1:
                fragment = new TeamFragment();
                title = getString(R.string.title_team);
                break;
            case 2:
                fragment = new TrackListFragment();
                title = getString(R.string.title_start);
                break;
            case 3:
                helper.getAuthentication().signOut();
                Intent it = new Intent(NavigationMainActivity.this, MainActivity.class);
                startActivity(it);
            default:
                break;
        }

        if (fragment != null) {
            FragmentManager fragmentManager = getSupportFragmentManager();
            FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction().detach(fragment).attach(fragment);
            fragmentTransaction.replace(R.id.container_body, fragment);
            fragmentTransaction.commit();

            // set the toolbar title
            getSupportActionBar().setTitle(title);
        }
    }

    public String darCurrentUser(){
        return currentID;
    }
    public ArrayList<Piloto> darPilotos(){
        return pilotos;
    }
    public void agregarPiloto(ArrayList<Piloto> nuevoPilotos){
        this.pilotos=nuevoPilotos;
    }

    public int darPosicion(){
        return posicion;
    }
    public void cambiarPosicion(int posicion){
        this.posicion=posicion;
    }

    public ArrayList<Pista> darPistas(){
        return pistas;
    }
    public void agregarPista(ArrayList<Pista> nuevaPistas){
        this.pistas=nuevaPistas;
    }

    public ArrayList<PistaItem> darPistasItem(){
        return pistasItem;
    }
    public void agregarPistaItem(ArrayList<PistaItem> nuevaPistas){
        this.pistasItem=nuevaPistas;
    }

    public PilotoItem darPilotoAEditar(){
        return pilotoAEditar;
    }

    public void setPilotoAEditar(PilotoItem piloto){
        this.pilotoAEditar=piloto;
    }

    public ArrayList<PilotoItem> darPilotosItem(){
        return pilotosItem;
    }
    public void agregarPilotoItem(ArrayList<PilotoItem> nuevosPilotosItem){
        pilotosItem=nuevosPilotosItem;
    }

}
